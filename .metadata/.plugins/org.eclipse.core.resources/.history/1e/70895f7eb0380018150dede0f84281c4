/*
 ============================================================================
 Name        : test_link.cu
 Author      : 
 Version     :
 Copyright   : Your copyright notice
 Description : CUDA compute reciprocals
 ============================================================================
 */

/* Includes, system */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/* Includes, cuda */
#include <cuda_runtime.h>
#include <cublas_v2.h>
#include "help.h"

/* Matrix size */
#define N  (275)

int main(int argc, char **argv)
{
    cublasStatus_t status;
    float *h_A;
    float *h_B;
    float *h_C;
    float *h_C_ref;
    float *d_A = 0;
    float *d_B = 0;
    float *d_C = 0;
    float alpha = 1.0f;
    float beta = 0.0f;
    int n2 = N * N;
    int i;
    float error_norm;
    float ref_norm;
    float diff;
    cublasHandle_t handle;

    /* Initialize CUBLAS */
    printf("simpleCUBLAS test running..\n");

    status = cublasCreate(&handle);

    h_A = (float*) malloc(3*2*sizeof(float));
    h_B = (float*) malloc(2*3*sizeof(float));
    h_C = (float*) malloc(3*3*sizeof(float));

    for(int i = 0; i < 6; i++)
    {
    	h_A[i] = 1;
    	h_B[i] = 1;
    }

    h_A[0] = 2;
    h_A[5] = 2;
    h_A[3] = 3;

    for(int i = 0; i < 6; i++)
    {
    	printf("%f \t", h_A[i]);
    	if((i+1)%2 == 0)
    	{
    		printf("\n\r");
    	}
    }


    printf("\n\n\r");

    for(int i = 0; i < 6; i++)
    {
    	printf("%f \t", h_B[i]);
    	if((i+1)%3 == 0)
    	{
    		printf("\n\r");
    	}
    }

    printf("\n\n\r");

    cudaError_t cuda_error = cudaSuccess;

    cuda_error = cudaMalloc((void**)&d_A, 24);
    cuda_error = cudaMalloc((void**)&d_B, 2*3*sizeof(float));
    cuda_error = cudaMalloc((void**)&d_C, 3*3*sizeof(float));

    cudaMemcpy(d_A, h_A, 3*2* sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_B, h_B, 2*3*sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_C, h_C, 3*3*sizeof(float), cudaMemcpyHostToDevice);

    cublasSgemm(handle, CUBLAS_OP_N, CUBLAS_OP_N, 3, 3, 2,
    		(const float*) &alpha, (const float*) d_A, 3,
    		(const float*) d_B, 2, (const float*) &beta,
    		d_C, 3);

    cudaMemcpy(h_C, d_C, 3*3*sizeof(float), cudaMemcpyDeviceToHost);

    for(int i = 0; i < 9; i++)
    {
    	printf("%f \t", h_C[i]);
    	if((i+1)%3 == 0)
    	{
    		printf("\n\r");
    	}
    }

    cublasDestroy(handle);

}

